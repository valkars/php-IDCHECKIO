<?php
/**
 * DetailedInformationOfTheHolderOfTheSubmittedDocument
 *
 * PHP version 5
 *
 * @category Class
 * @package  idcheckio
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * IdCheck.IO API
 *
 * Check identity documents
 *
 * OpenAPI spec version: 0.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace idcheckio\model;

use \ArrayAccess;
use idcheckio\ObjectSerializer;

/**
 * DetailedInformationOfTheHolderOfTheSubmittedDocument Class Doc Comment
 *
 * @category    Class
 * @package     idcheckio
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class DetailedInformationOfTheHolderOfTheSubmittedDocument implements ArrayAccess
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Detailed information of the holder of the submitted document';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'last_name' => 'string[]',
        'first_name' => 'string[]',
        'usage_name' => 'string',
        'nationality' => 'string',
        'gender' => 'string',
        'address' => 'string',
        'birth_date' => '\idcheckio\model\EventDate',
        'birth_place' => 'string',
        'birth_dpt' => 'string',
        'extra_infos' => '\idcheckio\model\GenericData[]'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'last_name' => 'lastName',
        'first_name' => 'firstName',
        'usage_name' => 'usageName',
        'nationality' => 'nationality',
        'gender' => 'gender',
        'address' => 'address',
        'birth_date' => 'birthDate',
        'birth_place' => 'birthPlace',
        'birth_dpt' => 'birthDpt',
        'extra_infos' => 'extraInfos'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'last_name' => 'setLastName',
        'first_name' => 'setFirstName',
        'usage_name' => 'setUsageName',
        'nationality' => 'setNationality',
        'gender' => 'setGender',
        'address' => 'setAddress',
        'birth_date' => 'setBirthDate',
        'birth_place' => 'setBirthPlace',
        'birth_dpt' => 'setBirthDpt',
        'extra_infos' => 'setExtraInfos'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'last_name' => 'getLastName',
        'first_name' => 'getFirstName',
        'usage_name' => 'getUsageName',
        'nationality' => 'getNationality',
        'gender' => 'getGender',
        'address' => 'getAddress',
        'birth_date' => 'getBirthDate',
        'birth_place' => 'getBirthPlace',
        'birth_dpt' => 'getBirthDpt',
        'extra_infos' => 'getExtraInfos'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }





    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->container['last_name'] = $data['last_name'] ?? null;
        $this->container['first_name'] = $data['first_name'] ?? null;
        $this->container['usage_name'] = $data['usage_name'] ?? null;
        $this->container['nationality'] = $data['nationality'] ?? null;
        $this->container['gender'] = $data['gender'] ?? null;
        $this->container['address'] = $data['address'] ?? null;
        $this->container['birth_date'] = $data['birth_date'] ?? null;
        $this->container['birth_place'] = $data['birth_place'] ?? null;
        $this->container['birth_dpt'] = $data['birth_dpt'] ?? null;
        $this->container['extra_infos'] = $data['extra_infos'] ?? null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets last_name
     * @return string[]
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     * @param string[] $last_name list of lastnames
     * @return $this
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets first_name
     * @return string[]
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     * @param string[] $first_name list of firstnames
     * @return $this
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets usage_name
     * @return string
     */
    public function getUsageName()
    {
        return $this->container['usage_name'];
    }

    /**
     * Sets usage_name
     * @param string $usage_name usage name
     * @return $this
     */
    public function setUsageName($usage_name)
    {
        $this->container['usage_name'] = $usage_name;

        return $this;
    }

    /**
     * Gets nationality
     * @return string
     */
    public function getNationality()
    {
        return $this->container['nationality'];
    }

    /**
     * Sets nationality
     * @param string $nationality nationality
     * @return $this
     */
    public function setNationality($nationality)
    {
        $this->container['nationality'] = $nationality;

        return $this;
    }

    /**
     * Gets gender
     * @return string
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     * @param string $gender gender
     * @return $this
     */
    public function setGender($gender)
    {
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets address
     * @return string
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     * @param string $address address
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets birth_date
     *
     * @return EventDate
     */
    public function getBirthDate()
    {
        return $this->container['birth_date'];
    }

    /**
     * Sets birth_date
     *
     * @param EventDate $birth_date
     * @return $this
     */
    public function setBirthDate($birth_date)
    {
        $this->container['birth_date'] = $birth_date;

        return $this;
    }

    /**
     * Gets birth_place
     * @return string
     */
    public function getBirthPlace()
    {
        return $this->container['birth_place'];
    }

    /**
     * Sets birth_place
     * @param string $birth_place birth place
     * @return $this
     */
    public function setBirthPlace($birth_place)
    {
        $this->container['birth_place'] = $birth_place;

        return $this;
    }

    /**
     * Gets birth_dpt
     * @return string
     */
    public function getBirthDpt()
    {
        return $this->container['birth_dpt'];
    }

    /**
     * Sets birth_dpt
     * @param string $birth_dpt birth department
     * @return $this
     */
    public function setBirthDpt($birth_dpt)
    {
        $this->container['birth_dpt'] = $birth_dpt;

        return $this;
    }

    /**
     * Gets extra_infos
     *
     * @return GenericData[]
     */
    public function getExtraInfos()
    {
        return $this->container['extra_infos'];
    }

    /**
     * Sets extra_infos
     *
     * @param GenericData[] $extra_infos additional information
     * @return $this
     */
    public function setExtraInfos($extra_infos)
    {
        $this->container['extra_infos'] = $extra_infos;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (\is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (\defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return \json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return \json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


