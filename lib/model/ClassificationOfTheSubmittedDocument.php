<?php
/**
 * ClassificationOfTheSubmittedDocument
 *
 * PHP version 5
 *
 * @category Class
 * @package  idcheckio
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * IdCheck.IO API
 *
 * Check identity documents
 *
 * OpenAPI spec version: 0.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace idcheckio\model;

use \ArrayAccess;
use idcheckio\ObjectSerializer;

/**
 * ClassificationOfTheSubmittedDocument Class Doc Comment
 *
 * @category    Class
 * @package     idcheckio
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ClassificationOfTheSubmittedDocument implements ArrayAccess
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Classification of the submitted document';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id_type' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id_type' => 'idType'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id_type' => 'setIdType'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id_type' => 'getIdType'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    public const ID_TYPE_ID = 'ID';
    public const ID_TYPE_P = 'P';
    public const ID_TYPE_RP = 'RP';
    public const ID_TYPE_V = 'V';
    public const ID_TYPE_DL = 'DL';
    public const ID_TYPE_UNKNOWN = 'UNKNOWN';



    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getIdTypeAllowableValues()
    {
        return [
            self::ID_TYPE_ID,
            self::ID_TYPE_P,
            self::ID_TYPE_RP,
            self::ID_TYPE_V,
            self::ID_TYPE_DL,
            self::ID_TYPE_UNKNOWN,
        ];
    }


    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->container['id_type'] = $data['id_type'] ?? null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        $allowed_values = ["ID", "P", "RP", "V", "DL", "UNKNOWN"];
        if (!\in_array($this->container['id_type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'id_type', must be one of 'ID', 'P', 'RP', 'V', 'DL', 'UNKNOWN'.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowed_values = ["ID", "P", "RP", "V", "DL", "UNKNOWN"];
        if (!\in_array($this->container['id_type'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets id_type
     * @return string
     */
    public function getIdType()
    {
        return $this->container['id_type'];
    }

    /**
     * Sets id_type
     * @param string $id_type identity document type
     * @return $this
     */
    public function setIdType($id_type)
    {
        $allowed_values = ['ID', 'P', 'RP', 'V', 'DL', 'UNKNOWN'];
        if (!\is_null($id_type) && (!\in_array($id_type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'id_type', must be one of 'ID', 'P', 'RP', 'V', 'DL', 'UNKNOWN'");
        }
        $this->container['id_type'] = $id_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (\is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (\defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return \json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return \json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


