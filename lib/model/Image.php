<?php
/**
 * Image
 *
 * PHP version 5
 *
 * @category Class
 * @package  idcheckio
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * IdCheck.IO API
 *
 * Check identity documents
 *
 * OpenAPI spec version: 0.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace idcheckio\model;

use \ArrayAccess;
use idcheckio\ObjectSerializer;

/**
 * Image Class Doc Comment
 *
 * @category    Class
 * @package     idcheckio
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Image implements ArrayAccess
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Image';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'doc' => 'string',
        'face' => 'string',
        'raw_type' => 'string',
        'light' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'doc' => 'doc',
        'face' => 'face',
        'raw_type' => 'rawType',
        'light' => 'light'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'doc' => 'setDoc',
        'face' => 'setFace',
        'raw_type' => 'setRawType',
        'light' => 'setLight'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'doc' => 'getDoc',
        'face' => 'getFace',
        'raw_type' => 'getRawType',
        'light' => 'getLight'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    public const DOC_CNI_BE_SPECIMEN = 'CNI_BE_SPECIMEN';
    public const DOC_CNI_BE_SPECIMEN_MRZ = 'CNI_BE_SPECIMEN_MRZ';
    public const DOC_PASSEPORT_FR_SPECIMEN_NATACHA = 'PASSEPORT_FR_SPECIMEN_NATACHA';
    public const DOC_PASSEPORT_FR_SPECIMEN_NATACHA_MRZ = 'PASSEPORT_FR_SPECIMEN_NATACHA_MRZ';
    public const DOC_CNI_FR_SPECIMEN_BERTHIER = 'CNI_FR_SPECIMEN_BERTHIER';
    public const DOC_CNI_FR_SPECIMEN_BERTHIER_MRZ = 'CNI_FR_SPECIMEN_BERTHIER_MRZ';
    public const DOC_PASSEPORT_FR_SPECIMEN_GRAUX_MRZ = 'PASSEPORT_FR_SPECIMEN_GRAUX_MRZ';
    public const DOC_PASSEPORT_FR_SPECIMEN_GRAUX = 'PASSEPORT_FR_SPECIMEN_GRAUX';
    public const DOC_CNI_BIH_SPECIMEN = 'CNI_BIH_SPECIMEN';
    public const DOC_CNI_BIH_SPECIMEN_MRZ = 'CNI_BIH_SPECIMEN_MRZ';
    public const DOC_PASSEPORT_USA_FALSIFIE_TRAVELER = 'PASSEPORT_USA_FALSIFIE_TRAVELER';
    public const DOC_PASSEPORT_USA_FALSIFIE_TRAVELER_MRZ = 'PASSEPORT_USA_FALSIFIE_TRAVELER_MRZ';
    public const DOC_RP_FR_SPECIMEN_MARTIN = 'RP_FR_SPECIMEN_MARTIN';
    public const DOC_RP_FR_SPECIMEN_MARTIN_MRZ = 'RP_FR_SPECIMEN_MARTIN_MRZ';
    public const DOC_CNI_GBR_SPECIMEN_FREEMAN = 'CNI_GBR_SPECIMEN_FREEMAN';
    public const DOC_CNI_GBR_SPECIMEN_FREEMAN_MRZ = 'CNI_GBR_SPECIMEN_FREEMAN_MRZ';
    public const DOC_PASSEPORT_CHN_SPECIMEN_ZHENGJIAN = 'PASSEPORT_CHN_SPECIMEN_ZHENGJIAN';
    public const DOC_PASSEPORT_CHN_SPECIMEN_ZHENGJIAN_MRZ = 'PASSEPORT_CHN_SPECIMEN_ZHENGJIAN_MRZ';
    public const DOC_PASSEPORT_ITA_SPECIMEN_ROSSI = 'PASSEPORT_ITA_SPECIMEN_ROSSI';
    public const DOC_PASSEPORT_ITA_SPECIMEN_ROSSI_MRZ = 'PASSEPORT_ITA_SPECIMEN_ROSSI_MRZ';
    public const DOC_RP_GBR_SPECIMEN_IVANOVA = 'RP_GBR_SPECIMEN_IVANOVA';
    public const DOC_RP_GBR_SPECIMEN_IVANOVA_MRZ = 'RP_GBR_SPECIMEN_IVANOVA_MRZ';
    public const DOC_DL_FR_SPECIMEN_MARTIN = 'DL_FR_SPECIMEN_MARTIN';
    public const DOC_DL_FR_SPECIMEN_MARTIN_MRZ = 'DL_FR_SPECIMEN_MARTIN_MRZ';
    public const DOC_ELECTRICITE_FR_BERTHIER = 'ELECTRICITE_FR_BERTHIER';
    public const DOC_IMPOSITION_FR_BERTHIER = 'IMPOSITION_FR_BERTHIER';
    public const DOC_RIB_FR_BERTHIER = 'RIB_FR_BERTHIER';
    public const DOC_TELEPHONE_2_DDOC_BERTHIER = 'TELEPHONE_2DDOC_BERTHIER';
    public const DOC_CARTE_GRISE_DUPONT = 'CARTE_GRISE_DUPONT';
    public const DOC_SALAIRE_FR_BERTHIER = 'SALAIRE_FR_BERTHIER';
    public const FACE_RECTO = 'RECTO';
    public const FACE_VERSO = 'VERSO';
    public const RAW_TYPE_BASE64 = 'BASE64';
    public const RAW_TYPE_JPG = 'JPG';
    public const LIGHT_DL = 'DL';
    public const LIGHT_IR = 'IR';
    public const LIGHT_UV = 'UV';



    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getDocAllowableValues()
    {
        return [
            self::DOC_CNI_BE_SPECIMEN,
            self::DOC_CNI_BE_SPECIMEN_MRZ,
            self::DOC_PASSEPORT_FR_SPECIMEN_NATACHA,
            self::DOC_PASSEPORT_FR_SPECIMEN_NATACHA_MRZ,
            self::DOC_CNI_FR_SPECIMEN_BERTHIER,
            self::DOC_CNI_FR_SPECIMEN_BERTHIER_MRZ,
            self::DOC_PASSEPORT_FR_SPECIMEN_GRAUX_MRZ,
            self::DOC_PASSEPORT_FR_SPECIMEN_GRAUX,
            self::DOC_CNI_BIH_SPECIMEN,
            self::DOC_CNI_BIH_SPECIMEN_MRZ,
            self::DOC_PASSEPORT_USA_FALSIFIE_TRAVELER,
            self::DOC_PASSEPORT_USA_FALSIFIE_TRAVELER_MRZ,
            self::DOC_RP_FR_SPECIMEN_MARTIN,
            self::DOC_RP_FR_SPECIMEN_MARTIN_MRZ,
            self::DOC_CNI_GBR_SPECIMEN_FREEMAN,
            self::DOC_CNI_GBR_SPECIMEN_FREEMAN_MRZ,
            self::DOC_PASSEPORT_CHN_SPECIMEN_ZHENGJIAN,
            self::DOC_PASSEPORT_CHN_SPECIMEN_ZHENGJIAN_MRZ,
            self::DOC_PASSEPORT_ITA_SPECIMEN_ROSSI,
            self::DOC_PASSEPORT_ITA_SPECIMEN_ROSSI_MRZ,
            self::DOC_RP_GBR_SPECIMEN_IVANOVA,
            self::DOC_RP_GBR_SPECIMEN_IVANOVA_MRZ,
            self::DOC_DL_FR_SPECIMEN_MARTIN,
            self::DOC_DL_FR_SPECIMEN_MARTIN_MRZ,
            self::DOC_ELECTRICITE_FR_BERTHIER,
            self::DOC_IMPOSITION_FR_BERTHIER,
            self::DOC_RIB_FR_BERTHIER,
            self::DOC_TELEPHONE_2_DDOC_BERTHIER,
            self::DOC_CARTE_GRISE_DUPONT,
            self::DOC_SALAIRE_FR_BERTHIER,
        ];
    }

    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getFaceAllowableValues()
    {
        return [
            self::FACE_RECTO,
            self::FACE_VERSO,
        ];
    }

    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getRawTypeAllowableValues()
    {
        return [
            self::RAW_TYPE_BASE64,
            self::RAW_TYPE_JPG,
        ];
    }

    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getLightAllowableValues()
    {
        return [
            self::LIGHT_DL,
            self::LIGHT_IR,
            self::LIGHT_UV,
        ];
    }


    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->container['doc'] = $data['doc'] ?? null;
        $this->container['face'] = $data['face'] ?? null;
        $this->container['raw_type'] = $data['raw_type'] ?? null;
        $this->container['light'] = $data['light'] ?? null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        $allowed_values = ["CNI_BE_SPECIMEN", "CNI_BE_SPECIMEN_MRZ", "PASSEPORT_FR_SPECIMEN_NATACHA", "PASSEPORT_FR_SPECIMEN_NATACHA_MRZ", "CNI_FR_SPECIMEN_BERTHIER", "CNI_FR_SPECIMEN_BERTHIER_MRZ", "PASSEPORT_FR_SPECIMEN_GRAUX_MRZ", "PASSEPORT_FR_SPECIMEN_GRAUX", "CNI_BIH_SPECIMEN", "CNI_BIH_SPECIMEN_MRZ", "PASSEPORT_USA_FALSIFIE_TRAVELER", "PASSEPORT_USA_FALSIFIE_TRAVELER_MRZ", "RP_FR_SPECIMEN_MARTIN", "RP_FR_SPECIMEN_MARTIN_MRZ", "CNI_GBR_SPECIMEN_FREEMAN", "CNI_GBR_SPECIMEN_FREEMAN_MRZ", "PASSEPORT_CHN_SPECIMEN_ZHENGJIAN", "PASSEPORT_CHN_SPECIMEN_ZHENGJIAN_MRZ", "PASSEPORT_ITA_SPECIMEN_ROSSI", "PASSEPORT_ITA_SPECIMEN_ROSSI_MRZ", "RP_GBR_SPECIMEN_IVANOVA", "RP_GBR_SPECIMEN_IVANOVA_MRZ", "DL_FR_SPECIMEN_MARTIN", "DL_FR_SPECIMEN_MARTIN_MRZ", "ELECTRICITE_FR_BERTHIER", "IMPOSITION_FR_BERTHIER", "RIB_FR_BERTHIER", "TELEPHONE_2DDOC_BERTHIER", "CARTE_GRISE_DUPONT", "SALAIRE_FR_BERTHIER"];
        if (!\in_array($this->container['doc'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'doc', must be one of 'CNI_BE_SPECIMEN', 'CNI_BE_SPECIMEN_MRZ', 'PASSEPORT_FR_SPECIMEN_NATACHA', 'PASSEPORT_FR_SPECIMEN_NATACHA_MRZ', 'CNI_FR_SPECIMEN_BERTHIER', 'CNI_FR_SPECIMEN_BERTHIER_MRZ', 'PASSEPORT_FR_SPECIMEN_GRAUX_MRZ', 'PASSEPORT_FR_SPECIMEN_GRAUX', 'CNI_BIH_SPECIMEN', 'CNI_BIH_SPECIMEN_MRZ', 'PASSEPORT_USA_FALSIFIE_TRAVELER', 'PASSEPORT_USA_FALSIFIE_TRAVELER_MRZ', 'RP_FR_SPECIMEN_MARTIN', 'RP_FR_SPECIMEN_MARTIN_MRZ', 'CNI_GBR_SPECIMEN_FREEMAN', 'CNI_GBR_SPECIMEN_FREEMAN_MRZ', 'PASSEPORT_CHN_SPECIMEN_ZHENGJIAN', 'PASSEPORT_CHN_SPECIMEN_ZHENGJIAN_MRZ', 'PASSEPORT_ITA_SPECIMEN_ROSSI', 'PASSEPORT_ITA_SPECIMEN_ROSSI_MRZ', 'RP_GBR_SPECIMEN_IVANOVA', 'RP_GBR_SPECIMEN_IVANOVA_MRZ', 'DL_FR_SPECIMEN_MARTIN', 'DL_FR_SPECIMEN_MARTIN_MRZ', 'ELECTRICITE_FR_BERTHIER', 'IMPOSITION_FR_BERTHIER', 'RIB_FR_BERTHIER', 'TELEPHONE_2DDOC_BERTHIER', 'CARTE_GRISE_DUPONT', 'SALAIRE_FR_BERTHIER'.";
        }

        $allowed_values = ["RECTO", "VERSO"];
        if (!\in_array($this->container['face'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'face', must be one of 'RECTO', 'VERSO'.";
        }

        $allowed_values = ["BASE64", "JPG"];
        if (!\in_array($this->container['raw_type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'raw_type', must be one of 'BASE64', 'JPG'.";
        }

        $allowed_values = ["DL", "IR", "UV"];
        if (!\in_array($this->container['light'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'light', must be one of 'DL', 'IR', 'UV'.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowed_values = ["CNI_BE_SPECIMEN", "CNI_BE_SPECIMEN_MRZ", "PASSEPORT_FR_SPECIMEN_NATACHA", "PASSEPORT_FR_SPECIMEN_NATACHA_MRZ", "CNI_FR_SPECIMEN_BERTHIER", "CNI_FR_SPECIMEN_BERTHIER_MRZ", "PASSEPORT_FR_SPECIMEN_GRAUX_MRZ", "PASSEPORT_FR_SPECIMEN_GRAUX", "CNI_BIH_SPECIMEN", "CNI_BIH_SPECIMEN_MRZ", "PASSEPORT_USA_FALSIFIE_TRAVELER", "PASSEPORT_USA_FALSIFIE_TRAVELER_MRZ", "RP_FR_SPECIMEN_MARTIN", "RP_FR_SPECIMEN_MARTIN_MRZ", "CNI_GBR_SPECIMEN_FREEMAN", "CNI_GBR_SPECIMEN_FREEMAN_MRZ", "PASSEPORT_CHN_SPECIMEN_ZHENGJIAN", "PASSEPORT_CHN_SPECIMEN_ZHENGJIAN_MRZ", "PASSEPORT_ITA_SPECIMEN_ROSSI", "PASSEPORT_ITA_SPECIMEN_ROSSI_MRZ", "RP_GBR_SPECIMEN_IVANOVA", "RP_GBR_SPECIMEN_IVANOVA_MRZ", "DL_FR_SPECIMEN_MARTIN", "DL_FR_SPECIMEN_MARTIN_MRZ", "ELECTRICITE_FR_BERTHIER", "IMPOSITION_FR_BERTHIER", "RIB_FR_BERTHIER", "TELEPHONE_2DDOC_BERTHIER", "CARTE_GRISE_DUPONT", "SALAIRE_FR_BERTHIER"];
        if (!\in_array($this->container['doc'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["RECTO", "VERSO"];
        if (!\in_array($this->container['face'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["BASE64", "JPG"];
        if (!\in_array($this->container['raw_type'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["DL", "IR", "UV"];
        if (!\in_array($this->container['light'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets doc
     * @return string
     */
    public function getDoc()
    {
        return $this->container['doc'];
    }

    /**
     * Sets doc
     * @param string $doc
     * @return $this
     */
    public function setDoc($doc)
    {
        $allowed_values = ['CNI_BE_SPECIMEN', 'CNI_BE_SPECIMEN_MRZ', 'PASSEPORT_FR_SPECIMEN_NATACHA', 'PASSEPORT_FR_SPECIMEN_NATACHA_MRZ', 'CNI_FR_SPECIMEN_BERTHIER', 'CNI_FR_SPECIMEN_BERTHIER_MRZ', 'PASSEPORT_FR_SPECIMEN_GRAUX_MRZ', 'PASSEPORT_FR_SPECIMEN_GRAUX', 'CNI_BIH_SPECIMEN', 'CNI_BIH_SPECIMEN_MRZ', 'PASSEPORT_USA_FALSIFIE_TRAVELER', 'PASSEPORT_USA_FALSIFIE_TRAVELER_MRZ', 'RP_FR_SPECIMEN_MARTIN', 'RP_FR_SPECIMEN_MARTIN_MRZ', 'CNI_GBR_SPECIMEN_FREEMAN', 'CNI_GBR_SPECIMEN_FREEMAN_MRZ', 'PASSEPORT_CHN_SPECIMEN_ZHENGJIAN', 'PASSEPORT_CHN_SPECIMEN_ZHENGJIAN_MRZ', 'PASSEPORT_ITA_SPECIMEN_ROSSI', 'PASSEPORT_ITA_SPECIMEN_ROSSI_MRZ', 'RP_GBR_SPECIMEN_IVANOVA', 'RP_GBR_SPECIMEN_IVANOVA_MRZ', 'DL_FR_SPECIMEN_MARTIN', 'DL_FR_SPECIMEN_MARTIN_MRZ', 'ELECTRICITE_FR_BERTHIER', 'IMPOSITION_FR_BERTHIER', 'RIB_FR_BERTHIER', 'TELEPHONE_2DDOC_BERTHIER', 'CARTE_GRISE_DUPONT', 'SALAIRE_FR_BERTHIER'];
        if (!\is_null($doc) && (!\in_array($doc, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'doc', must be one of 'CNI_BE_SPECIMEN', 'CNI_BE_SPECIMEN_MRZ', 'PASSEPORT_FR_SPECIMEN_NATACHA', 'PASSEPORT_FR_SPECIMEN_NATACHA_MRZ', 'CNI_FR_SPECIMEN_BERTHIER', 'CNI_FR_SPECIMEN_BERTHIER_MRZ', 'PASSEPORT_FR_SPECIMEN_GRAUX_MRZ', 'PASSEPORT_FR_SPECIMEN_GRAUX', 'CNI_BIH_SPECIMEN', 'CNI_BIH_SPECIMEN_MRZ', 'PASSEPORT_USA_FALSIFIE_TRAVELER', 'PASSEPORT_USA_FALSIFIE_TRAVELER_MRZ', 'RP_FR_SPECIMEN_MARTIN', 'RP_FR_SPECIMEN_MARTIN_MRZ', 'CNI_GBR_SPECIMEN_FREEMAN', 'CNI_GBR_SPECIMEN_FREEMAN_MRZ', 'PASSEPORT_CHN_SPECIMEN_ZHENGJIAN', 'PASSEPORT_CHN_SPECIMEN_ZHENGJIAN_MRZ', 'PASSEPORT_ITA_SPECIMEN_ROSSI', 'PASSEPORT_ITA_SPECIMEN_ROSSI_MRZ', 'RP_GBR_SPECIMEN_IVANOVA', 'RP_GBR_SPECIMEN_IVANOVA_MRZ', 'DL_FR_SPECIMEN_MARTIN', 'DL_FR_SPECIMEN_MARTIN_MRZ', 'ELECTRICITE_FR_BERTHIER', 'IMPOSITION_FR_BERTHIER', 'RIB_FR_BERTHIER', 'TELEPHONE_2DDOC_BERTHIER', 'CARTE_GRISE_DUPONT', 'SALAIRE_FR_BERTHIER'");
        }
        $this->container['doc'] = $doc;

        return $this;
    }

    /**
     * Gets face
     * @return string
     */
    public function getFace()
    {
        return $this->container['face'];
    }

    /**
     * Sets face
     * @param string $face
     * @return $this
     */
    public function setFace($face)
    {
        $allowed_values = ['RECTO', 'VERSO'];
        if (!\is_null($face) && (!\in_array($face, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'face', must be one of 'RECTO', 'VERSO'");
        }
        $this->container['face'] = $face;

        return $this;
    }

    /**
     * Gets raw_type
     * @return string
     */
    public function getRawType()
    {
        return $this->container['raw_type'];
    }

    /**
     * Sets raw_type
     * @param string $raw_type
     * @return $this
     */
    public function setRawType($raw_type)
    {
        $allowed_values = ['BASE64', 'JPG'];
        if (!\is_null($raw_type) && (!\in_array($raw_type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'raw_type', must be one of 'BASE64', 'JPG'");
        }
        $this->container['raw_type'] = $raw_type;

        return $this;
    }

    /**
     * Gets light
     * @return string
     */
    public function getLight()
    {
        return $this->container['light'];
    }

    /**
     * Sets light
     * @param string $light
     * @return $this
     */
    public function setLight($light)
    {
        $allowed_values = ['DL', 'IR', 'UV'];
        if (!\is_null($light) && (!\in_array($light, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'light', must be one of 'DL', 'IR', 'UV'");
        }
        $this->container['light'] = $light;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (\is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (\defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return \json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return \json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


