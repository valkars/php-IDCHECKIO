<?php
/**
 * ImageRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  idcheckio
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * IdCheck.IO API
 *
 * Check identity documents
 *
 * OpenAPI spec version: 0.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace idcheckio\model;

use \ArrayAccess;
use idcheckio\ObjectSerializer;

/**
 * ImageRequest Class Doc Comment
 *
 * @category    Class
 * @package     idcheckio
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ImageRequest implements ArrayAccess
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ImageRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'api_version' => 'string',
        'front_image' => 'string',
        'front_image_ir' => 'string',
        'front_image_uv' => 'string',
        'back_image' => 'string',
        'back_image_ir' => 'string',
        'back_image_uv' => 'string',
        'recto_image_cropped' => 'bool',
        'face_image_cropped' => 'bool',
        'signature_image_cropped' => 'bool'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'api_version' => 'apiVersion',
        'front_image' => 'frontImage',
        'front_image_ir' => 'frontImageIr',
        'front_image_uv' => 'frontImageUv',
        'back_image' => 'backImage',
        'back_image_ir' => 'backImageIr',
        'back_image_uv' => 'backImageUv',
        'recto_image_cropped' => 'rectoImageCropped',
        'face_image_cropped' => 'faceImageCropped',
        'signature_image_cropped' => 'signatureImageCropped'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'api_version' => 'setApiVersion',
        'front_image' => 'setFrontImage',
        'front_image_ir' => 'setFrontImageIr',
        'front_image_uv' => 'setFrontImageUv',
        'back_image' => 'setBackImage',
        'back_image_ir' => 'setBackImageIr',
        'back_image_uv' => 'setBackImageUv',
        'recto_image_cropped' => 'setRectoImageCropped',
        'face_image_cropped' => 'setFaceImageCropped',
        'signature_image_cropped' => 'setSignatureImageCropped'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'api_version' => 'getApiVersion',
        'front_image' => 'getFrontImage',
        'front_image_ir' => 'getFrontImageIr',
        'front_image_uv' => 'getFrontImageUv',
        'back_image' => 'getBackImage',
        'back_image_ir' => 'getBackImageIr',
        'back_image_uv' => 'getBackImageUv',
        'recto_image_cropped' => 'getRectoImageCropped',
        'face_image_cropped' => 'getFaceImageCropped',
        'signature_image_cropped' => 'getSignatureImageCropped'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }





    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->container['api_version'] = $data['api_version'] ?? null;
        $this->container['front_image'] = $data['front_image'] ?? null;
        $this->container['front_image_ir'] = $data['front_image_ir'] ?? null;
        $this->container['front_image_uv'] = $data['front_image_uv'] ?? null;
        $this->container['back_image'] = $data['back_image'] ?? null;
        $this->container['back_image_ir'] = $data['back_image_ir'] ?? null;
        $this->container['back_image_uv'] = $data['back_image_uv'] ?? null;
        $this->container['recto_image_cropped'] = $data['recto_image_cropped'] ?? false;
        $this->container['face_image_cropped'] = $data['face_image_cropped'] ?? false;
        $this->container['signature_image_cropped'] = $data['signature_image_cropped'] ?? false;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['front_image'] === null) {
            $invalid_properties[] = "'front_image' can't be null";
        }
        if ($this->container['front_image_ir'] === null) {
            $invalid_properties[] = "'front_image_ir' can't be null";
        }
        if ($this->container['front_image_uv'] === null) {
            $invalid_properties[] = "'front_image_uv' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['front_image'] === null) {
            return false;
        }
        if ($this->container['front_image_ir'] === null) {
            return false;
        }
        if ($this->container['front_image_uv'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets api_version
     * @return string
     */
    public function getApiVersion()
    {
        return $this->container['api_version'];
    }

    /**
     * Sets api_version
     * @param string $api_version API version (for backward compatibility purpose)
     * @return $this
     */
    public function setApiVersion($api_version)
    {
        $this->container['api_version'] = $api_version;

        return $this;
    }

    /**
     * Gets front_image
     * @return string
     */
    public function getFrontImage()
    {
        return $this->container['front_image'];
    }

    /**
     * Sets front_image
     * @param string $front_image frontImage containing front daylight image of the identity document (base64 encoded, no wrap, jpg/png/tiff/pdf format)
     * @return $this
     */
    public function setFrontImage($front_image)
    {
        $this->container['front_image'] = $front_image;

        return $this;
    }

    /**
     * Gets front_image_ir
     * @return string
     */
    public function getFrontImageIr()
    {
        return $this->container['front_image_ir'];
    }

    /**
     * Sets front_image_ir
     * @param string $front_image_ir frontImage containing front infrared image of the identity document (base64 encoded, no wrap, jpg/png/tiff/pdf format)
     * @return $this
     */
    public function setFrontImageIr($front_image_ir)
    {
        $this->container['front_image_ir'] = $front_image_ir;

        return $this;
    }

    /**
     * Gets front_image_uv
     * @return string
     */
    public function getFrontImageUv()
    {
        return $this->container['front_image_uv'];
    }

    /**
     * Sets front_image_uv
     * @param string $front_image_uv frontImage containing front ultraviolet image of the identity document (base64 encoded, no wrap, jpg/png/tiff/pdf format)
     * @return $this
     */
    public function setFrontImageUv($front_image_uv)
    {
        $this->container['front_image_uv'] = $front_image_uv;

        return $this;
    }

    /**
     * Gets back_image
     * @return string
     */
    public function getBackImage()
    {
        return $this->container['back_image'];
    }

    /**
     * Sets back_image
     * @param string $back_image backImage containing daylight back image of the identity document (base64 encoded, no wrap, jpg/png/tiff/pdf format)
     * @return $this
     */
    public function setBackImage($back_image)
    {
        $this->container['back_image'] = $back_image;

        return $this;
    }

    /**
     * Gets back_image_ir
     * @return string
     */
    public function getBackImageIr()
    {
        return $this->container['back_image_ir'];
    }

    /**
     * Sets back_image_ir
     * @param string $back_image_ir backImage containing infrared back image of the identity document (base64 encoded, no wrap, jpg/png/tiff/pdf format)
     * @return $this
     */
    public function setBackImageIr($back_image_ir)
    {
        $this->container['back_image_ir'] = $back_image_ir;

        return $this;
    }

    /**
     * Gets back_image_uv
     * @return string
     */
    public function getBackImageUv()
    {
        return $this->container['back_image_uv'];
    }

    /**
     * Sets back_image_uv
     * @param string $back_image_uv backImage containing ultraviolet back image of the identity document (base64 encoded, no wrap, jpg/png/tiff/pdf format)
     * @return $this
     */
    public function setBackImageUv($back_image_uv)
    {
        $this->container['back_image_uv'] = $back_image_uv;

        return $this;
    }

    /**
     * Gets recto_image_cropped
     * @return bool
     */
    public function getRectoImageCropped()
    {
        return $this->container['recto_image_cropped'];
    }

    /**
     * Sets recto_image_cropped
     * @param bool $recto_image_cropped rectoImageCropped true to obtain recto image cropped if applicable
     * @return $this
     */
    public function setRectoImageCropped($recto_image_cropped)
    {
        $this->container['recto_image_cropped'] = $recto_image_cropped;

        return $this;
    }

    /**
     * Gets face_image_cropped
     * @return bool
     */
    public function getFaceImageCropped()
    {
        return $this->container['face_image_cropped'];
    }

    /**
     * Sets face_image_cropped
     * @param bool $face_image_cropped faceImageCropped true to obtain recto image cropped if applicable
     * @return $this
     */
    public function setFaceImageCropped($face_image_cropped)
    {
        $this->container['face_image_cropped'] = $face_image_cropped;

        return $this;
    }

    /**
     * Gets signature_image_cropped
     * @return bool
     */
    public function getSignatureImageCropped()
    {
        return $this->container['signature_image_cropped'];
    }

    /**
     * Sets signature_image_cropped
     * @param bool $signature_image_cropped signatureImageCropped true to obtain recto image cropped if applicable
     * @return $this
     */
    public function setSignatureImageCropped($signature_image_cropped)
    {
        $this->container['signature_image_cropped'] = $signature_image_cropped;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (\is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (\defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return \json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return \json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


