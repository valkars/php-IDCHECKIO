<?php
/**
 * DetailedInformationOfTheSubmittedDocument
 *
 * PHP version 5
 *
 * @category Class
 * @package  idcheckio
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * IdCheck.IO API
 *
 * Check identity documents
 *
 * OpenAPI spec version: 0.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace idcheckio\model;

use \ArrayAccess;
use idcheckio\ObjectSerializer;

/**
 * DetailedInformationOfTheSubmittedDocument Class Doc Comment
 *
 * @category    Class
 * @package     idcheckio
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class DetailedInformationOfTheSubmittedDocument implements ArrayAccess
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Detailed information of the submitted document';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'emit_country' => 'string',
        'emit_date' => '\idcheckio\model\EventDate',
        'expiration_date' => '\idcheckio\model\EventDate',
        'document_number' => 'string',
        'extra_infos' => '\idcheckio\model\GenericData[]'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'emit_country' => 'emitCountry',
        'emit_date' => 'emitDate',
        'expiration_date' => 'expirationDate',
        'document_number' => 'documentNumber',
        'extra_infos' => 'extraInfos'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'emit_country' => 'setEmitCountry',
        'emit_date' => 'setEmitDate',
        'expiration_date' => 'setExpirationDate',
        'document_number' => 'setDocumentNumber',
        'extra_infos' => 'setExtraInfos'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'emit_country' => 'getEmitCountry',
        'emit_date' => 'getEmitDate',
        'expiration_date' => 'getExpirationDate',
        'document_number' => 'getDocumentNumber',
        'extra_infos' => 'getExtraInfos'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }





    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->container['emit_country'] = $data['emit_country'] ?? null;
        $this->container['emit_date'] = $data['emit_date'] ?? null;
        $this->container['expiration_date'] = $data['expiration_date'] ?? null;
        $this->container['document_number'] = $data['document_number'] ?? null;
        $this->container['extra_infos'] = $data['extra_infos'] ?? null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets emit_country
     * @return string
     */
    public function getEmitCountry()
    {
        return $this->container['emit_country'];
    }

    /**
     * Sets emit_country
     * @param string $emit_country emit country
     * @return $this
     */
    public function setEmitCountry($emit_country)
    {
        $this->container['emit_country'] = $emit_country;

        return $this;
    }

    /**
     * Gets emit_date
     *
     * @return EventDate
     */
    public function getEmitDate()
    {
        return $this->container['emit_date'];
    }

    /**
     * Sets emit_date
     *
     * @param EventDate $emit_date
     * @return $this
     */
    public function setEmitDate($emit_date)
    {
        $this->container['emit_date'] = $emit_date;

        return $this;
    }

    /**
     * Gets expiration_date
     *
     * @return EventDate
     */
    public function getExpirationDate()
    {
        return $this->container['expiration_date'];
    }

    /**
     * Sets expiration_date
     *
     * @param EventDate $expiration_date
     * @return $this
     */
    public function setExpirationDate($expiration_date)
    {
        $this->container['expiration_date'] = $expiration_date;

        return $this;
    }

    /**
     * Gets document_number
     * @return string
     */
    public function getDocumentNumber()
    {
        return $this->container['document_number'];
    }

    /**
     * Sets document_number
     * @param string $document_number document number
     * @return $this
     */
    public function setDocumentNumber($document_number)
    {
        $this->container['document_number'] = $document_number;

        return $this;
    }

    /**
     * Gets extra_infos
     *
     * @return GenericData[]
     */
    public function getExtraInfos()
    {
        return $this->container['extra_infos'];
    }

    /**
     * Sets extra_infos
     *
     * @param GenericData[] $extra_infos additional informations
     * @return $this
     */
    public function setExtraInfos($extra_infos)
    {
        $this->container['extra_infos'] = $extra_infos;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (\is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (\defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return \json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return \json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


